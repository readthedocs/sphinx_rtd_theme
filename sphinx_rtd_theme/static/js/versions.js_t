const themeVersionSelector = {{ 'true' if theme_version_selector|tobool else 'false' }};
const themeLanguageSelector = {{ 'true' if theme_language_selector|tobool else 'false' }};

if (themeLanguageSelector || themeVersionSelector) {
  function onSelectorSwitch(event) {
    const option = event.target.selectedIndex;
    const item = event.target.options[option];
    window.location.href = item.dataset.url;
  }

  document.addEventListener("readthedocs-addons-data-ready", function (event) {
    const config = event.detail.data();

    const versionSwitch = document.querySelector(
      "div.switch-menus > div.version-switch",
    );
    if (themeVersionSelector) {
      let versions = config.versions.active;
      if (config.versions.current.hidden || config.versions.current.type === "external") {
        versions.unshift(config.versions.current);
      }
      const versionSelect = `
    <select>
      ${versions
        .map(
          (version) => `
        <option
  value="${version.slug}"
  ${config.versions.current.slug === version.slug ? 'selected="selected"' : ""}
              data-url="${version.urls.documentation}">
              ${version.slug}
          </option>`,
        )
        .join("\n")}
    </select>
  `;

      versionSwitch.innerHTML = versionSelect;
      versionSwitch.firstElementChild.addEventListener("change", onSelectorSwitch);
    }

    const languageSwitch = document.querySelector(
      "div.switch-menus > div.language-switch",
    );

    if (themeLanguageSelector) {
      if (config.projects.translations.length) {
        // Add the current language to the options on the selector
        let languages = config.projects.translations.concat(
          config.projects.current,
        );
        languages = languages.sort((a, b) =>
          a.language.name.localeCompare(b.language.name),
        );

        const languageSelect = `
      <select>
        ${languages
          .map(
            (language) => `
              <option
                  value="${language.language.code}"
                  ${config.projects.current.slug === language.slug ? 'selected="selected"' : ""}
                  data-url="${language.urls.documentation}">
                  ${language.language.name}
              </option>`,
          )
          .join("\n")}
       </select>
    `;

        languageSwitch.innerHTML = languageSelect;
        languageSwitch.firstElementChild.addEventListener("change", onSelectorSwitch);
      }
      else {
        languageSwitch.remove();
      }
    }
  });
}

document.addEventListener("readthedocs-addons-data-ready", function (event) {
  // Trigger the Read the Docs Addons Search modal when clicking on "Search docs" input from the topnav.
  document
    .querySelector("[role='search'] input")
    .addEventListener("focusin", () => {
      const event = new CustomEvent("readthedocs-search-show");
      document.dispatchEvent(event);
    });
});
